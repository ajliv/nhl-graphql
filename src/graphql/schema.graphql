type Query {
    conference(id: Int): Conference
    conferences: [Conference]!
    division(id: Int): Division
    divisions: [Division]!
    player(id: Int): Player
    standings(type: StandingsType): [Standings]
    team(id: Int): Team
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

# A timestamp in the ISO8601 standard format
scalar Datetime

enum ClinchIndicator {
    p
    x
    y
    z
}

enum Position {
    C
    D
    G
    LW
    RW
}

enum PositionType {
    Defenseman
    Forward
    Goalie
}

enum ShootsCatches {
    L
    R
}

enum StandingsType {
    byConference
    byDivision
    byLeague
    divisionLeaders
    postseason
    preseason
    regularSeason
    wildCard
    wildCardWithLeaders
}

enum StatsType {
    byDayOfWeek
    byDayOfWeekPlayoffs
    byMonth
    byMonthPlayoffs
    careerPlayoffs
    careerRegularSeason
    gameLog
    goalsByGameSituation
    goalsByGameSituationPlayoffs
    homeAndAway
    homeAndAwayPlayoffs
    onPaceRegularSeason
    playoffGameLog
    playoffStatRankings
    regularSeasonStatRankings
    statsSingleSeason
    statsSingleSeasonPlayoffs
    vsConference
    vsConferencePlayoffs
    vsDivision
    vsDivisionPlayoffs
    vsTeam
    vsTeamPlayoffs
    winLoss
    winLossPlayoffs
    yearByYear
    yearByYearPlayoffs
    yearByYearPlayoffsRank
    yearByYearRank
}

enum StreakType {
    losses
    ot
    ties
    wins
}

type Conference @key(fields: "id") {
    id: Int!
    abbreviation: String
    active: Boolean
    divisions: [Division]!
    name: String
    shortName: String
}

type Division @key(fields: "id") {
    id: Int!
    abbreviation: String
    active: Boolean
    conference: Conference
    name: String
    shortName: String
}

type Player @key(fields: "id") {
    id: Int!
    age: Int
    alternateCaptain: Boolean
    birthDate: Datetime
    captain: Boolean
    currentTeam: Team
    firstName: String
    fullName: String
    height: String
    lastName: String
    position: Position
    positionType: PositionType
    primaryNumber: Int
    rookie: Boolean
    shootsCatches: ShootsCatches
    weight: Int
}

type Standings {
    standingsType: StandingsType
    division: Division
    conference: Conference
    teamRecords: [StandingsTeam]
}

type StandingsRecord {
    wins: Int
    losses: Int
    ot: Int
    ties: Int
    type: String
}

type StandingsTeam {
    team: Team
    clinchIndicator: ClinchIndicator
    conferenceHomeRank: Int
    conferenceL10Rank: Int
    conferenceRank: Int
    conferenceRoadRank: Int
    divisionHomeRank: Int
    divisionL10Rank: Int
    divisionRank: Int
    divisionRoadRank: Int
    gamesPlayed: Int
    goalsAgainst: Int
    goalsScored: Int
    leagueHomeRank: Int
    leagueL10Rank: Int
    leagueRank: Int
    leagueRecord: StandingsRecord
    leagueRoadRank: Int
    points: Int
    records: TeamRecords
    regulationWins: Int
    row: Int
    streak: Streak
    wildCardRank: Int
}

type Streak {
    streakCode: String
    streakNumber: Int
    streakType: StreakType
}

type Team @key(fields: "id") {
    id: Int!
    abbreviation: String
    active: Boolean
    conference: Conference
    division: Division
    firstYearOfPlay: Int
    locationName: String
    name: String
    roster: [Player]!
    teamName: String
}

type TeamRecords {
    conferenceRecords: [StandingsRecord]
    divisionRecords: [StandingsRecord]
    overallRecords: [StandingsRecord]
}
